#!/usr/bin/env node


var path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });
var schedule = require('node-schedule');

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = require('env-port')('8001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var models = require('../models');
var cronTasksManager = require('../libs/cron-tasks-manager');

models.waterline.initialize(models.config, function (err, models) {
  if (err) throw err;
  //  console.log(models.collections);
  app.models = models.collections;
  app.connections = models.connections;
  app.keys = require('json-store-list')(path.resolve(__dirname, '../keys.json'));
  app.clocks = require('../libs/json-store-object')({
    morning: {
      hour: 6,
      minute: 30
    },
    night: {
      hour: 20,
      minute: 0
    },
    up: true
  }, path.resolve(__dirname, '../clocks.json'));


  cronTasksManager(app.clocks.getAll());
  schedule.scheduleJob('autoupdate', '0 0 1 * * *', function () {
    cronTasksManager(app.clocks.getAll());
    // Auto delete old keys
    var keys = app.keys.getAll();
    keys.forEach(function (el) {
      if ((new Date(el.date)).getTime() < (new Date()).getTime()) {
        app.keys.delete('id', el.id, function(err) {
          if (err) console.error(err);
        });
      }
    })
  });


  // start Server
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Event listener for HTTP server "error" event.
 */


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log(require('server-welcome')(port, 'Storage Office Template'));
}